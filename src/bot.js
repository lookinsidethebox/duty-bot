const { Telegraf } = require('telegraf');
const cron = require('node-cron');
const { botToken, chatId, trustedIds, rulesLink } = require('./config');
const { setCircleStartDateManually } = require('./paramsService');
const { createLog } = require('./logService');
const {
  getDuty,
  getMyDuty,
  getFormattedDutyList,
  getMondayReminder,
  getSundayReminder,
  getMiniModersList,
  getMoneyInfo,
  getNextDutySlots,
  assignDuty,
  getDutiesToRemove,
  removeUserDuty,
  makeEverydayMaintenance,
  getHistoryYears,
  getHistory,
  getHolidayList,
} = require('./botService');

const bot = new Telegraf(botToken);
const userState = {};

const isTrustedChat = (ctx) => {
  return ctx.chat && trustedIds.includes(ctx.chat.id.toString());
};

bot.use(async (ctx, next) => {
  if (isTrustedChat(ctx)) {
    return next();
  } else {
    const commandText = ctx.message && ctx.message.text ? ctx.message.text : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞';
    const chatText = ctx.chat && ctx.chat.id ? ctx.chat.id : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    createLog(`‚õî –ö–æ–º–∞–Ω–¥–∞ ${commandText} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: ${chatText} –Ω–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π.`);
    await ctx.reply('‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º.');
  }
});

bot.telegram.setMyCommands([
  { command: 'blame', description: '–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–Ω—ã–π?' },
  { command: 'doom', description: '–ö–æ–≥–¥–∞ —è –¥–µ–∂—É—Ä—é?' },
  { command: 'list', description: '–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤' },
  { command: 'assign', description: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ' },
  { command: 'remove', description: '–£–¥–∞–ª–∏—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ' },
  { command: 'history', description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–∂—É—Ä—Å—Ç–≤' },
  { command: 'mini_moders', description: '–°–ø–∏—Å–æ–∫ –º–∏–Ω–∏-–º–æ–¥–µ—Ä–æ–≤' },
  { command: 'holidays', description: '–°–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤' },
  { command: 'rules', description: '–ü–∞–º—è—Ç–∫–∞ –¥–µ–∂—É—Ä–Ω–æ–≥–æ' },
  { command: 'money', description: '–û—Ç—á–µ—Ç –ø–æ –æ–ø–ª–∞—Ç–µ –∑–∞ —Ö–æ—Å—Ç–∏–Ω–≥' },
  // { command: 'test_maintenance', description: '–¢–µ—Å—Ç makeEverydayMaintenance' },
  // { command: 'test_monday', description: '–¢–µ—Å—Ç getMondayReminder' },
  // { command: 'test_sunday', description: '–¢–µ—Å—Ç getSundayReminder' },
]);

bot.command('blame', async (ctx) => {
  await ctx.reply(getDuty(), { parse_mode: 'HTML' });
});

bot.hears(/–∫—Ç–æ –¥–µ–∂—É—Ä–Ω—ã–π\??/i, async (ctx) => {
  await ctx.reply(getDuty(), { parse_mode: 'HTML' });
});

bot.command('doom', async (ctx) => {
  await ctx.reply(getMyDuty(ctx.from.username), { parse_mode: 'HTML' });
});

bot.hears(/–∫–æ–≥–¥–∞ —è –¥–µ–∂—É—Ä—é\??/i, async (ctx) => {
  await ctx.reply(getMyDuty(ctx.from.username), { parse_mode: 'HTML' });
});

bot.hears('set_circle_start_date', async (ctx) => {
  const userId = ctx.from.id;
  userState[userId] = 'awaiting_circle_start_date';
  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.');
});

bot.hears(/^\d{4}-\d{2}-\d{2}$/, async (ctx) => {
  const userId = ctx.from.id;

  if (userState[userId] === 'awaiting_circle_start_date') {
    const newDate = ctx.message.text.trim();
    await setCircleStartDateManually(newDate);
    userState[userId] = null;
    await ctx.reply(`–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∫—Ä—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${newDate}`);
  }
});

bot.command('list', async (ctx) => {
  await ctx.reply(getFormattedDutyList(), { parse_mode: 'HTML' });
});

bot.command('assign', (ctx) => {
  const result = getNextDutySlots(ctx.from.username);

  if (typeof result === 'string') {
    ctx.reply(result, { parse_mode: 'HTML' });
  } else {
    const buttons = result.map((slot) => [
      { text: slot.label, callback_data: `select_slot_${slot.startDate}` },
    ]);

    ctx.reply('üìã <b>–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞:</b>', {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: buttons,
      },
    });
  }
});

bot.action(/select_slot_.+/, async (ctx) => {
  const data = ctx.match[0];
  const selectedDate = data.replace('select_slot_', '');
  const message = await assignDuty(ctx.from.username, selectedDate);
  await ctx.reply(message, { parse_mode: 'HTML' });
  await ctx.deleteMessage();
  ctx.answerCbQuery();
});

bot.command('remove', (ctx) => {
  const result = getDutiesToRemove(ctx.from.username);

  if (typeof result === 'string') {
    ctx.reply(result, { parse_mode: 'HTML' });
  } else {
    const buttons = result.map((duty) => [
      { text: duty.label, callback_data: `remove_duty_${duty.startDate}` },
    ]);

    ctx.reply('‚ùó<b>–ö–∞–∫–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å?</b>', {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: buttons,
      },
    });
  }
});

bot.action(/remove_duty_.+/, async (ctx) => {
  const data = ctx.match[0];
  const selectedDate = data.replace('remove_duty_', '');
  const message = await removeUserDuty(ctx.from.username, selectedDate);
  await ctx.reply(message, { parse_mode: 'HTML' });
  await ctx.deleteMessage();
  ctx.answerCbQuery();
});

bot.command('history', (ctx) => {
  const result = getHistoryYears();

  if (typeof result === 'string') {
    ctx.reply(result, { parse_mode: 'HTML' });
  } else {
    const buttons = result.map((year) => [{ text: year, callback_data: `history_year_${year}` }]);

    ctx.reply('‚ùó<b>–ò—Å—Ç–æ—Ä–∏—é –∑–∞ –∫–∞–∫–æ–π –≥–æ–¥ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?</b>', {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: buttons,
      },
    });
  }
});

bot.action(/history_year_.+/, async (ctx) => {
  const data = ctx.match[0];
  console.log('data: ', data);
  const selectedYear = data.replace('history_year_', '');
  const message = getHistory(selectedYear);
  await ctx.reply(message, { parse_mode: 'HTML' });
  await ctx.deleteMessage();
  ctx.answerCbQuery();
});

bot.command('rules', async (ctx) => {
  await ctx.reply(`üìã <b>–ü–∞–º—è—Ç–∫–∞ –¥–ª—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ:</b>\n ${rulesLink}`, {
    parse_mode: 'HTML',
  });
});

bot.command('money', async (ctx) => {
  await ctx.reply(getMoneyInfo(), { parse_mode: 'HTML' });
});

bot.command('mini_moders', async (ctx) => {
  await ctx.reply(getMiniModersList(), { parse_mode: 'HTML' });
});

bot.command('holidays', async (ctx) => {
  await ctx.reply(getHolidayList(), { parse_mode: 'HTML' });
});

bot.command('test_monday', async (ctx) => {
  await ctx.reply(getMondayReminder(), { parse_mode: 'HTML' });
});

bot.command('test_sunday', async (ctx) => {
  await ctx.reply(getSundayReminder(), { parse_mode: 'HTML' });
});

bot.command('test_maintenance', async (ctx) => {
  const message = makeEverydayMaintenance();

  if (message) {
    await ctx.reply(message, { parse_mode: 'HTML' });
  }
});

cron.schedule('0 10 * * 1', async () => {
  const message = getMondayReminder();
  await bot.telegram.sendMessage(chatId, message);
  createLog(`–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${message}`);
});

cron.schedule('0 20 * * 0', async () => {
  const message = getSundayReminder();
  await bot.telegram.sendMessage(chatId, message);
  createLog(`–í–æ—Å–∫—Ä–µ—Å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${message}`);
});

cron.schedule('0 0 * * *', async () => {
  const message = makeEverydayMaintenance();

  if (message) {
    await bot.telegram.sendMessage(chatId, message);
  }
});

module.exports = bot;
