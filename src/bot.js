const { Telegraf } = require('telegraf');
const cron = require('node-cron');
const { botToken, chatId, trustedIds, rulesLink } = require('./config');
const { removeFinishedDuty } = require('./dutyService');
const {
  getDuty,
  getFormattedDutyList,
  getMondayReminder,
  getSundayReminder,
  getMiniModersList,
  getMoneyInfo,
  getNextDutySlots,
  assignDuty,
} = require('./botService');

const bot = new Telegraf(botToken);

const isTrustedChat = (ctx) => {
  return ctx.chat && trustedIds.includes(ctx.chat.id.toString());
};

bot.use(async (ctx, next) => {
  if (isTrustedChat(ctx)) {
    return next();
  } else {
    console.log(`‚õî –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: —á–∞—Ç ${ctx.chat?.id} –Ω–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π.`);
    await ctx.reply('‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º.');
  }
});

bot.telegram.setMyCommands([
  { command: 'blame', description: '–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–Ω—ã–π?' },
  { command: 'list', description: '–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤' },
  { command: 'assign', description: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ' },
  { command: 'mini_moders', description: '–°–ø–∏—Å–æ–∫ –º–∏–Ω–∏-–º–æ–¥–µ—Ä–æ–≤' },
  { command: 'rules', description: '–ü–∞–º—è—Ç–∫–∞ –¥–µ–∂—É—Ä–Ω–æ–≥–æ' },
  { command: 'money', description: '–û—Ç—á–µ—Ç –ø–æ –æ–ø–ª–∞—Ç–µ –∑–∞ —Ö–æ—Å—Ç–∏–Ω–≥' },
  // { command: 'test_monday', description: '–¢–µ—Å—Ç getMondayReminder' },
  // { command: 'test_sunday', description: '–¢–µ—Å—Ç getSundayReminder' },
  // { command: 'test_remove', description: '–¢–µ—Å—Ç removeFinishedDuty' },
]);

bot.command('blame', async (ctx) => {
  await ctx.reply(getDuty(), { parse_mode: 'HTML' });
});

bot.hears(/–∫—Ç–æ –¥–µ–∂—É—Ä–Ω—ã–π\??/i, async (ctx) => {
  await ctx.reply(getDuty());
});

bot.command('list', async (ctx) => {
  await ctx.reply(getFormattedDutyList(), { parse_mode: 'HTML' });
});

bot.command('assign', (ctx) => {
  const slots = getNextDutySlots();

  const buttons = slots.map((slot) => [
    { text: slot.label, callback_data: `select_slot_${slot.startDate}` },
  ]);

  ctx.reply('üìã <b>–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –¥–µ–∂—É—Ä—Å—Ç–≤–∞:</b>', {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: buttons,
    },
  });
});

bot.action(/select_slot_.+/, async (ctx) => {
  const data = ctx.match[0];
  const selectedDate = data.replace('select_slot_', '');
  const message = await assignDuty(ctx.from.username, selectedDate);
  await ctx.reply(message);
  await ctx.deleteMessage();
  ctx.answerCbQuery();
});

bot.command('rules', async (ctx) => {
  await ctx.reply(`üìã <b>–ü–∞–º—è—Ç–∫–∞ –¥–ª—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ:</b>\n ${rulesLink}`, {
    parse_mode: 'HTML',
  });
});

bot.command('money', async (ctx) => {
  await ctx.reply(getMoneyInfo(), { parse_mode: 'HTML' });
});

bot.command('mini_moders', async (ctx) => {
  await ctx.reply(getMiniModersList(), { parse_mode: 'HTML' });
});

bot.command('test_monday', async (ctx) => {
  await ctx.reply(getMondayReminder(), { parse_mode: 'HTML' });
});

bot.command('test_sunday', async (ctx) => {
  await ctx.reply(getSundayReminder(), { parse_mode: 'HTML' });
});

bot.command('test_remove', async (ctx) => {
  removeFinishedDuty();
});

cron.schedule('0 10 * * 1', async () => {
  const message = getMondayReminder();
  await bot.telegram.sendMessage(chatId, message);
  console.log('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ', message);
});

cron.schedule('0 20 * * 0', async () => {
  const message = getSundayReminder();
  await bot.telegram.sendMessage(chatId, message);
  console.log('–í–æ—Å–∫—Ä–µ—Å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ', message);
});

cron.schedule('0 0 * * 1', async () => {
  removeFinishedDuty();
});

module.exports = bot;
