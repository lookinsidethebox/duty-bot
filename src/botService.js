const { rulesLink, moneyLink, tinkoffCard, hipotekarnaCard } = require('./config');
const { createLog } = require('./logService');
const {
  getCurrentDuty,
  getByStartDate,
  getByEndDate,
  getDutiesFormattedList,
  getAvailableSlots,
  createDuty,
  getUserDuties,
  removeDuty,
} = require('./dutyService');
const {
  getModerName,
  getMiniModers,
  getModersNotOnDuty,
  getModerByUsername,
} = require('./userService');
const {
  getCircleStartDate,
  getCircleFinishDate,
  isCircleStartDateToday,
  updateCircleStartDate,
} = require('./paramsService');

const getDuty = () => {
  const currentDuty = getCurrentDuty();

  if (currentDuty) {
    const moderName = getModerName(currentDuty.name);
    return `<b>–î–µ–∂—É—Ä–Ω—ã–π</b>: ${moderName}`;
  } else {
    return '–î–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ—Ç, –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è üò¢';
  }
};

const getFormattedDutyList = () => {
  const dutiesByMonth = getDutiesFormattedList();

  if (!dutiesByMonth) {
    return '–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤ –ø—É—Å—Ç üò¢';
  }

  let message = 'üìã <b>–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤:</b>\n';
  let previousDutyEndDate = null;
  let currentMonth = '';
  const circleStartDate = getCircleStartDate();
  const circleFinishDate = getCircleFinishDate();
  let isCircleStartDateSet = false;
  let isCircleFinishDateSet = false;

  Object.keys(dutiesByMonth).forEach((month) => {
    const monthDuties = dutiesByMonth[month];

    monthDuties.forEach((duty) => {
      const startDateStr = duty.startDate.format('DD MMMM');
      const endDateStr = duty.endDate.format('DD MMMM');
      const dutyMonth = getCapitalizedMonth(duty.startDate.format('MMMM YYYY'));

      if (previousDutyEndDate) {
        const gapInDays = duty.startDate.diff(previousDutyEndDate, 'days');

        if (gapInDays > 1) {
          let missingStart = previousDutyEndDate.clone().add(1, 'day');

          while (missingStart.isBefore(duty.startDate)) {
            let missingEnd = missingStart.clone().add(6, 'day');
            const missingMonth = getCapitalizedMonth(missingStart.format('MMMM YYYY'));

            if (missingStart >= circleStartDate && !isCircleStartDateSet) {
              message += '\n üöÄ –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –∫—Ä—É–≥–∞ \n\n';
              isCircleStartDateSet = true;
            }

            const nextWeekStartDate = missingStart.clone().add(1, 'day');
            if (nextWeekStartDate >= circleFinishDate && !isCircleFinishDateSet) {
              message += '\n üèÅ –ö–æ–Ω–µ—Ü –∫—Ä—É–≥–∞ \n\n';
              isCircleFinishDateSet = true;
            }

            if (missingMonth !== currentMonth) {
              message += `\n<b>${missingMonth}:</b>\n`;
              currentMonth = missingMonth;
            }

            message += `${missingStart.format('DD MMMM')} ‚Äî ${missingEnd.format(
              'DD MMMM'
            )}: ‚ùó<b>–î–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ—Ç</b>\n`;
            missingStart = missingEnd.clone().add(1, 'day');
          }
        }
      }

      if (dutyMonth !== currentMonth) {
        message += `\n<b>${dutyMonth}:</b>\n`;
        currentMonth = dutyMonth;
      }

      if (duty.startDate >= circleStartDate && !isCircleStartDateSet) {
        message += '\n üöÄ –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –∫—Ä—É–≥–∞ \n\n';
        isCircleStartDateSet = true;
      }

      if (duty.startDate >= circleFinishDate && !isCircleFinishDateSet) {
        message += '\n üèÅ –ö–æ–Ω–µ—Ü –∫—Ä—É–≥–∞ \n\n';
        isCircleFinishDateSet = true;
      }

      message += `${startDateStr} ‚Äî ${endDateStr}: ${duty.name}\n`;
      previousDutyEndDate = duty.endDate.clone();
    });
  });

  if (!isCircleFinishDateSet) {
    message += '\n üèÅ –ö–æ–Ω–µ—Ü –∫—Ä—É–≥–∞\n';
  }

  const modersNotOnDuty = getModersNotOnDuty();

  if (modersNotOnDuty.length > 0) {
    message += `\n‚ùó<b>–ú–æ–¥–µ—Ä—ã, –Ω–µ –∑–∞–ø–∏—Å–∞–≤—à–∏–µ—Å—è –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ:</b>\n`;
    modersNotOnDuty.forEach((moder) => {
      message += `${getModerName(moder.name)}`;
    });
  }

  message += '\n–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ: /assign';
  return message.trim();
};

const getCapitalizedMonth = (month) => {
  return month.charAt(0).toUpperCase() + month.slice(1);
};

const getNextDutySlots = (username) => {
  const moder = getModerByUsername(username);

  if (!moder) {
    return '‚õî –ò–∑–≤–∏–Ω–∏, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ –º–æ–¥–µ—Ä–æ–≤. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ.';
  }

  const result = getAvailableSlots(moder.name);

  if (typeof result === 'string') {
    return result;
  }

  return result.map((slot) => ({
    startDate: slot.startDate,
    label: `${slot.startDate} ‚Äî ${slot.endDate}`,
  }));
};

const assignDuty = async (username, selectedDate) => {
  const moder = getModerByUsername(username);

  if (!moder) {
    return '‚õî –ò–∑–≤–∏–Ω–∏, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ –º–æ–¥–µ—Ä–æ–≤. –ó–∞–ø–∏—Å—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.';
  }

  await createDuty(moder.name, selectedDate);
  return `‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –¢–≤–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å ${selectedDate}.`;
};

const getDutiesToRemove = (username) => {
  const moder = getModerByUsername(username);

  if (!moder) {
    return '‚õî –ò–∑–≤–∏–Ω–∏, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ –º–æ–¥–µ—Ä–æ–≤.';
  }

  const duties = getUserDuties(moder.name);

  if (duties.length === 0) {
    return '‚õî –ò–∑–≤–∏–Ω–∏, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–≤–æ–∏ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–µ.';
  }

  return duties;
};

const removeUserDuty = async (username, selectedDate) => {
  const duties = getDutiesToRemove(username);

  if (typeof duties === 'string') {
    return duties;
  }

  const dutyToRemove = duties.find((duty) => duty.startDate === selectedDate);

  if (!dutyToRemove) {
    return '‚õî –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–µ –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ.';
  }

  await removeDuty(dutyToRemove);
  return `‚úÖ –î–µ–∂—É—Ä—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ! –ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ–µ: /assign`;
};

const getMiniModersList = () => {
  const miniModers = getMiniModers();

  if (miniModers.length === 0) {
    return '–ú–∏–Ω–∏–º–æ–¥–µ—Ä–æ–≤ –Ω–µ—Ç üò¢';
  }

  let message = 'üìã <b>–°–ø–∏—Å–æ–∫ –º–∏–Ω–∏–º–æ–¥–µ—Ä–æ–≤:</b>\n';
  miniModers.forEach((moder) => {
    message += `<b>${moder.name}</b> (@${moder.nickname}): ${moder.topics}\n`;
  });

  return message.trim();
};

const getMondayReminder = () => {
  const todayDuty = getByStartDate();
  let message;

  if (todayDuty) {
    const moderName = getModerName(todayDuty.name);
    message = `üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –¥–µ–∂—É—Ä–∏—Ç ${moderName}!`;
  } else {
    message = 'üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> —Å–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ—Ç, –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è üò¢';
  }

  return message;
};

const getSundayReminder = () => {
  const todayDuty = getByEndDate();
  let message;

  if (todayDuty) {
    const moderName = getModerName(todayDuty.name);
    message = `üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–≤–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ, ${moderName}!\n`;
    message += `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø–∞–º—è—Ç–∫–æ–π: ${rulesLink}\n`;
    message += '‚ùó–ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: /assign';
  } else {
    message = 'üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> —Å–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–µ–∫–æ–º—É üò¢\n';
    message += '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ: /assign';
  }

  return message;
};

const getMoneyInfo = () => {
  let message = `üìã <b>–û—Ç—á–µ—Ç –ø–æ –æ–ø–ª–∞—Ç–µ –∑–∞ —Ö–æ—Å—Ç–∏–Ω–≥:</b>\n ${moneyLink}\n\n`;
  message += '<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:</b>\n';
  message += `–ö–∞—Ä—Ç–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: ${tinkoffCard}\n`;
  message += `–ö–∞—Ä—Ç–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞: ${hipotekarnaCard} (–º–æ–∂–Ω–æ —Å–ª–∞—Ç—å —á–µ—Ä–µ–∑ PaySend)`;
  return message;
};

const makeEverydayMaintenance = () => {
  createLog('–ù–∞—á–∏–Ω–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ...');

  if (isCircleStartDateToday()) {
    updateCircleStartDate();
    createLog('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∫—Ä—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  }

  createLog('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
};

module.exports = {
  getDuty,
  getFormattedDutyList,
  getMondayReminder,
  getSundayReminder,
  getMiniModersList,
  getMoneyInfo,
  getNextDutySlots,
  assignDuty,
  getDutiesToRemove,
  removeUserDuty,
  makeEverydayMaintenance,
};
