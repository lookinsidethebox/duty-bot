const {
  getCurrentDuty,
  getByStartDate,
  getByEndDate,
  getDutiesFormattedList,
  getUserName,
} = require('./dutyService');
const { rulesLink } = require('./config');

const getDuty = () => {
  const currentDuty = getCurrentDuty();

  if (currentDuty) {
    const userName = getUserName(currentDuty.name);
    return `<b>–î–µ–∂—É—Ä–Ω—ã–π</b>: ${userName}`;
  } else {
    return '–î–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ—Ç, –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è üò¢';
  }
};

const getFormattedDutyList = () => {
  const dutiesByMonth = getDutiesFormattedList();

  if (!dutiesByMonth) {
    return '–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤ –ø—É—Å—Ç üò¢';
  }

  let message = 'üìã <b>–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä—Å—Ç–≤:</b>\n';

  Object.keys(dutiesByMonth).forEach((month) => {
    message += `\n<b>${month}:</b>\n`;
    const monthDuties = dutiesByMonth[month];

    for (let i = 0; i < monthDuties.length; i++) {
      const duty = monthDuties[i];
      const startDateStr = duty.startDate.format('DD.MM.YYYY');
      const endDateStr = duty.endDate.format('DD.MM.YYYY');

      message += `${startDateStr} ‚Äî ${endDateStr}: ${duty.name}\n`;

      if (i < monthDuties.length - 1) {
        const nextDuty = monthDuties[i + 1];
        const gapInDays = nextDuty.startDate.diff(duty.endDate, 'days');

        if (gapInDays > 1) {
          let missingStart = duty.endDate.clone().add(1, 'day');

          while (missingStart.isBefore(nextDuty.startDate)) {
            let missingEndOfWeek = missingStart.clone().endOf('week');
            if (missingEndOfWeek.isAfter(nextDuty.startDate)) {
              missingEndOfWeek = nextDuty.startDate.clone().subtract(1, 'day');
            }

            if (missingStart.isBefore(missingEndOfWeek)) {
              message += `${missingStart.format(
                'DD.MM.YYYY'
              )} ‚Äî ${missingEndOfWeek.format(
                'DD.MM.YYYY'
              )}: ‚ùó<b>–î–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ—Ç</b>\n`;
            }

            missingStart = missingEndOfWeek.clone().add(1, 'day');
          }
        }
      }
    }
  });

  return message.trim();
};

const getMondayReminder = () => {
  const todayDuty = getByStartDate();
  let message;

  if (todayDuty) {
    const userName = getUserName(todayDuty.name);
    message = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –¥–µ–∂—É—Ä–∏—Ç ${userName}!`;
  } else {
    message = 'üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ—Ç, –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è üò¢';
  }

  return message;
};

const getSundayReminder = () => {
  const todayDuty = getByEndDate();
  let message;

  if (todayDuty) {
    const userName = getUserName(todayDuty.name);
    message = `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–≤–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ, ${userName}!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø–∞–º—è—Ç–∫–æ–π: ${rulesLink}`;
  } else {
    message =
      'üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–µ–∫–æ–º—É üò¢';
  }

  return message;
};

module.exports = {
  getDuty,
  getFormattedDutyList,
  getMondayReminder,
  getSundayReminder,
};
